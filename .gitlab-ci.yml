
variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  # Tell 'docker:dind' to enable TLS (recommended)
  # and generate certificates in the specified directory.
  DOCKER_TLS_CERTDIR: "/certs"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository
  key: "$CI_JOB_NAME"


stages:
  - compile
  - test
  - package
  - deploy

mvn-compile:
  stage: compile
  image: maven:3.8.5-openjdk-17
  script:
    - 'mvn $MAVEN_CLI_OPTS compile'
  artifacts:
    paths:
      - target
  only:
    - merge_requests
    - main

mvn-test:
  stage: test
  needs: ["mvn-compile"]
  image: maven:3.8.5-openjdk-17
  services:
    - name: docker:dind
      # explicitly disable tls to avoid docker startup interruption
      command: [ "--tls=false" ]
  variables:
    # Instruct Testcontainers to use the daemon of DinD, use port 2735 for non-tls connections.
    DOCKER_HOST: "tcp://docker:2375"
    # Instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
    # Improve performance with overlayfs.
    DOCKER_DRIVER: overlay2
  script:
    - 'mvn $MAVEN_CLI_OPTS test'
  artifacts:
    paths:
      - target
  only:
    - merge_requests
    - main

test-coverage-report:
  stage: test
  needs: ["mvn-test"]
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    - 'python /opt/cover2cover.py target/jacoco-report/jacoco.xml $CI_PROJECT_DIR/src/main/java/ > target/cobertura.xml'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: target/cobertura.xml
  coverage: '/Total.*?([0-9]{1,3})%/'
  only:
    - merge_requests
    - main

mvn-package:
  stage: package
  needs: ["mvn-test"]
  image: maven:3.8.5-openjdk-17
  script:
    - 'mvn $MAVEN_CLI_OPTS install -DskipTests'
    - 'mvn org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate -Dexpression=project.version -q -DforceStdout >> target/version'
    - 'cat target/version'
  artifacts:
    paths:
      - "target/quarkus-app/lib/"
      - "target/quarkus-app/*.jar"
      - "target/quarkus-app/app/"
      - "target/quarkus-app/quarkus/"
      - "target/kubernetes"
      - "target/version"
  only:
    - main

docker-build:
  stage: package
  image: docker:latest
  needs: ["mvn-package"]
  services:
    - name: docker:dind
      command: [ "--tls=false" ]
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  script:
    - 'version=`cat target/version`'
    - 'echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin'
    - 'docker build -f src/main/docker/Dockerfile -t registry.gitlab.com/ayd2-dic2022/players-api:$version .'
    - 'docker push registry.gitlab.com/ayd2-dic2022/players-api:$version'
  only:
    - main
  artifacts:
    paths:
      - "target/kubernetes/kubernetes.yml"

kubernetes-deploy:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  needs: ['docker-build']
  script:
    - 'kubectl config get-contexts'
    - 'kubectl config use-context ayd2-dic2022/kubernetes-config:gke'
    - 'kubectl apply -f target/kubernetes/kubernetes.yml'
    - 'kubectl apply -f src/main/kubernetes/ingress.yml'
  only:
    - main

